!===============================================================================
! Copyright 1999-2017 Intel Corporation All Rights Reserved.
!
! The source code,  information  and material  ("Material") contained  herein is
! owned by Intel Corporation or its  suppliers or licensors,  and  title to such
! Material remains with Intel  Corporation or its  suppliers or  licensors.  The
! Material  contains  proprietary  information  of  Intel or  its suppliers  and
! licensors.  The Material is protected by  worldwide copyright  laws and treaty
! provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
! modified, published,  uploaded, posted, transmitted,  distributed or disclosed
! in any way without Intel's prior express written permission.  No license under
! any patent,  copyright or other  intellectual property rights  in the Material
! is granted to  or  conferred  upon  you,  either   expressly,  by implication,
! inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
! property rights must be express and approved by Intel in writing.
!
! Unless otherwise agreed by Intel in writing,  you may not remove or alter this
! notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
! suppliers or licensors in any way.
!===============================================================================

!  Content:
!      Intel(R) Math Kernel Library (Intel(R) MKL) FORTRAN interface
!      for service routines
!*******************************************************************************

      INTEGER*4 MKL_DOMAIN_ALL
      INTEGER*4 MKL_DOMAIN_BLAS
      INTEGER*4 MKL_DOMAIN_FFT
      INTEGER*4 MKL_DOMAIN_VML
      INTEGER*4 MKL_DOMAIN_PARDISO

      INTEGER*4 MKL_DYNAMIC_TRUE
      INTEGER*4 MKL_DYNAMIC_FALSE
      INTEGER*4 MKL_ENABLE_SSE4_2
      INTEGER*4 MKL_ENABLE_AVX
      INTEGER*4 MKL_ENABLE_AVX2
      INTEGER*4 MKL_ENABLE_AVX512
      INTEGER*4 MKL_ENABLE_AVX512_MIC
      INTEGER*4 MKL_ENABLE_AVX512_MIC_E1
      INTEGER*4 MKL_INTERFACE_LP64
      INTEGER*4 MKL_INTERFACE_ILP64
      INTEGER*4 MKL_INTERFACE_GNU
      INTEGER*4 MKL_THREADING_INTEL
      INTEGER*4 MKL_THREADING_SEQUENTIAL
      INTEGER*4 MKL_THREADING_PGI
      INTEGER*4 MKL_THREADING_GNU
      INTEGER*4 MKL_THREADING_TBB
      INTEGER*4 MKL_CBWR_BRANCH
      INTEGER*4 MKL_CBWR_ALL
      INTEGER*4 MKL_CBWR_OFF
      INTEGER*4 MKL_CBWR_UNSET_ALL
      INTEGER*4 MKL_CBWR_BRANCH_OFF
      INTEGER*4 MKL_CBWR_AUTO
      INTEGER*4 MKL_CBWR_COMPATIBLE
      INTEGER*4 MKL_CBWR_SSE2
      INTEGER*4 MKL_CBWR_SSSE3
      INTEGER*4 MKL_CBWR_SSE4_1
      INTEGER*4 MKL_CBWR_SSE4_2
      INTEGER*4 MKL_CBWR_AVX
      INTEGER*4 MKL_CBWR_AVX2
      INTEGER*4 MKL_CBWR_AVX512_MIC
      INTEGER*4 MKL_CBWR_AVX512
      INTEGER*4 MKL_CBWR_AVX512_MIC_E1
      INTEGER*4 MKL_CBWR_SUCCESS
      INTEGER*4 MKL_CBWR_ERR_INVALID_SETTINGS
      INTEGER*4 MKL_CBWR_ERR_INVALID_INPUT
      INTEGER*4 MKL_CBWR_ERR_UNSUPPORTED_BRANCH
      INTEGER*4 MKL_CBWR_ERR_UNKNOWN_BRANCH
      INTEGER*4 MKL_CBWR_ERR_MODE_CHANGE_FAILURE
      INTEGER*4 MKL_PEAK_MEM_ENABLE
      INTEGER*4 MKL_PEAK_MEM_RESET
      INTEGER*4 MKL_PEAK_MEM
      INTEGER*4 MKL_PEAK_MEM_DISABLE
      INTEGER*4 MKL_MEM_MCDRAM

      PARAMETER (MKL_DOMAIN_ALL      = 0)
      PARAMETER (MKL_DOMAIN_BLAS     = 1)
      PARAMETER (MKL_DOMAIN_FFT      = 2)
      PARAMETER (MKL_DOMAIN_VML      = 3)
      PARAMETER (MKL_DOMAIN_PARDISO  = 4)
      PARAMETER (MKL_DYNAMIC_TRUE    = 1)
      PARAMETER (MKL_DYNAMIC_FALSE   = 0)
      PARAMETER (MKL_ENABLE_SSE4_2        = 0)
      PARAMETER (MKL_ENABLE_AVX           = 1)
      PARAMETER (MKL_ENABLE_AVX2          = 2)
      PARAMETER (MKL_ENABLE_AVX512_MIC    = 3)
      PARAMETER (MKL_ENABLE_AVX512        = 4)
      PARAMETER (MKL_ENABLE_AVX512_MIC_E1 = 5)
      PARAMETER (MKL_INTERFACE_LP64  = Z"00000000")
      PARAMETER (MKL_INTERFACE_ILP64 = Z"00000001")
      PARAMETER (MKL_INTERFACE_GNU   = Z"00000002")
      PARAMETER (MKL_THREADING_INTEL = 0)
      PARAMETER (MKL_THREADING_SEQUENTIAL = 1)
      PARAMETER (MKL_THREADING_PGI = 2)
      PARAMETER (MKL_THREADING_GNU = 3)
      PARAMETER (MKL_THREADING_TBB = 4)

      PARAMETER (MKL_CBWR_BRANCH      = 1)
      PARAMETER (MKL_CBWR_ALL         = -1)

      PARAMETER (MKL_CBWR_OFF         = 0)
      PARAMETER (MKL_CBWR_UNSET_ALL   = 0)

      PARAMETER (MKL_CBWR_BRANCH_OFF     = 1)
      PARAMETER (MKL_CBWR_AUTO           = 2)
      PARAMETER (MKL_CBWR_COMPATIBLE     = 3)
      PARAMETER (MKL_CBWR_SSE2           = 4)
      PARAMETER (MKL_CBWR_SSSE3          = 6)
      PARAMETER (MKL_CBWR_SSE4_1         = 7)
      PARAMETER (MKL_CBWR_SSE4_2         = 8)
      PARAMETER (MKL_CBWR_AVX            = 9)
      PARAMETER (MKL_CBWR_AVX2           = 10)
      PARAMETER (MKL_CBWR_AVX512_MIC     = 11)
      PARAMETER (MKL_CBWR_AVX512         = 12)
      PARAMETER (MKL_CBWR_AVX512_MIC_E1  = 13)

      PARAMETER (MKL_CBWR_SUCCESS                 =  0)
      PARAMETER (MKL_CBWR_ERR_INVALID_SETTINGS    = -1)
      PARAMETER (MKL_CBWR_ERR_INVALID_INPUT       = -2)
      PARAMETER (MKL_CBWR_ERR_UNSUPPORTED_BRANCH  = -3)
      PARAMETER (MKL_CBWR_ERR_UNKNOWN_BRANCH      = -4)
      PARAMETER (MKL_CBWR_ERR_MODE_CHANGE_FAILURE = -8)

      PARAMETER (MKL_PEAK_MEM_DISABLE =  0)
      PARAMETER (MKL_PEAK_MEM_ENABLE  =  1)
      PARAMETER (MKL_PEAK_MEM_RESET   = -1)
      PARAMETER (MKL_PEAK_MEM         =  2)
      PARAMETER (MKL_MEM_MCDRAM       =  1)

      INTERFACE
      SUBROUTINE MKL_GET_VERSION_STRING(BUF)
      CHARACTER*(*) BUF
      END SUBROUTINE
      END INTERFACE

      INTERFACE
      DOUBLE PRECISION FUNCTION MKL_GET_CPU_FREQUENCY()
      END FUNCTION
      END INTERFACE

      INTERFACE
      DOUBLE PRECISION FUNCTION MKL_GET_MAX_CPU_FREQUENCY()
      END FUNCTION
      END INTERFACE

      INTERFACE
      DOUBLE PRECISION FUNCTION MKL_GET_CLOCKS_FREQUENCY()
      END FUNCTION
      END INTERFACE

      INTERFACE
      SUBROUTINE MKL_GET_CPU_CLOCKS(CPU_CLOCKS)
      INTEGER*8  CPU_CLOCKS
      END SUBROUTINE
      END INTERFACE

! Threading control functions

      INTERFACE
      INTEGER*4 FUNCTION MKL_GET_MAX_THREADS()
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_GET_NUM_STRIPES()
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_DOMAIN_GET_MAX_THREADS(DOMAIN)
      INTEGER*4 DOMAIN
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_SET_NUM_THREADS_LOCAL(NTHRS)
      INTEGER*4  NTHRS
      END FUNCTION
      END INTERFACE

      INTERFACE
      SUBROUTINE MKL_SET_NUM_THREADS(NTHRS)
      INTEGER*4  NTHRS
      END SUBROUTINE
      END INTERFACE

      INTERFACE
      SUBROUTINE MKL_SET_NUM_STRIPES(NSTRP)
      INTEGER*4  NSTRP
      END SUBROUTINE
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_DOMAIN_SET_NUM_THREADS(NTHRS,DOMAIN)
      INTEGER*4 NTHRS
      INTEGER*4 DOMAIN
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_GET_DYNAMIC()
      END FUNCTION
      END INTERFACE

      INTERFACE
      SUBROUTINE MKL_SET_DYNAMIC(MKL_DYNAMIC)
      INTEGER*4 MKL_DYNAMIC
      END SUBROUTINE
      END INTERFACE

! Memory functions

      INTERFACE
      FUNCTION MKL_MALLOC(SIZE,ALIGN)
      USE ISO_C_BINDING
      INTEGER(KIND=C_INTPTR_T) MKL_MALLOC
      INTEGER(KIND=C_SIZE_T)   SIZE
      INTEGER*4 ALIGN
      END FUNCTION MKL_MALLOC
      END INTERFACE

      INTERFACE
      FUNCTION MKL_CALLOC(NUM,SIZE,ALIGN)
      USE ISO_C_BINDING
      INTEGER(KIND=C_INTPTR_T) MKL_CALLOC
      INTEGER(KIND=C_SIZE_T)   NUM,SIZE
      INTEGER*4 ALIGN
      END FUNCTION MKL_CALLOC
      END INTERFACE

      INTERFACE
      FUNCTION MKL_REALLOC(PTR,SIZE)
      USE ISO_C_BINDING
      INTEGER(KIND=C_INTPTR_T) MKL_REALLOC,PTR
      INTEGER(KIND=C_SIZE_T)   SIZE
      END FUNCTION MKL_REALLOC
      END INTERFACE

      INTERFACE
      SUBROUTINE MKL_FREE(PTR)
      USE ISO_C_BINDING
      INTEGER(KIND=C_INTPTR_T) PTR
      END SUBROUTINE MKL_FREE
      END INTERFACE

      INTERFACE
      INTEGER*8 FUNCTION MKL_MEM_STAT(N_BUFF)
      INTEGER*4 N_BUFF
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*8 FUNCTION MKL_PEAK_MEM_USAGE(RESET)
      INTEGER*4 RESET
      END FUNCTION
      END INTERFACE

      INTERFACE
      SUBROUTINE MKL_FREE_BUFFERS()
      END SUBROUTINE
      END INTERFACE

      INTERFACE
      SUBROUTINE MKL_THREAD_FREE_BUFFERS()
      END SUBROUTINE
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_DISABLE_FAST_MM()
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_SET_MEMORY_LIMIT(MEM_TYPE,LIMIT)
      USE ISO_C_BINDING
      INTEGER*4 MEM_TYPE
      INTEGER(KIND=C_SIZE_T) LIMIT
      END FUNCTION
      END INTERFACE

! Intel(R) MKL Progress routine

      INTERFACE
      FUNCTION MKL_PROGRESS( THREAD, STEP, STAGE )
      INTEGER*4          THREAD,STEP
      CHARACTER*(*)      STAGE
      INTEGER            MKL_PROGRESS
      END FUNCTION
      END INTERFACE


      INTERFACE
      INTEGER*4 FUNCTION MKL_ENABLE_INSTRUCTIONS(TYPE)
      INTEGER*4 TYPE
      END FUNCTION
      END INTERFACE

! Intel(R) MKL dynamic interface

      INTERFACE
      INTEGER*4 FUNCTION MKL_SET_INTERFACE_LAYER(MKL_INTERFACE)
      INTEGER*4 MKL_INTERFACE
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_SET_THREADING_LAYER(MKL_THREADING)
      INTEGER*4 MKL_THREADING
      END FUNCTION
      END INTERFACE

! Intel(R) MKL CBWR functions

      INTERFACE
      INTEGER*4 FUNCTION MKL_CBWR_GET(MKL_CBWR)
      INTEGER*4 MKL_CBWR
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_CBWR_SET(MKL_CBWR)
      INTEGER*4 MKL_CBWR
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_CBWR_GET_AUTO_BRANCH()
      END FUNCTION
      END INTERFACE

! Intel(R) MKL MIC service routines

      INTEGER*4 MKL_TARGET_NONE
      INTEGER*4 MKL_TARGET_HOST
      INTEGER*4 MKL_TARGET_MIC

      INTEGER*4 MKL_MIC_DEFAULT_TARGET_TYPE
      INTEGER*4 MKL_MIC_DEFAULT_TARGET_NUMBER

      DOUBLE PRECISION MKL_MIC_AUTO_WORKDIVISION
      DOUBLE PRECISION MKL_MPI_PPN

      PARAMETER (MKL_TARGET_NONE    = 0)
      PARAMETER (MKL_TARGET_HOST    = 1)
      PARAMETER (MKL_TARGET_MIC     = 2)

      PARAMETER (MKL_MIC_DEFAULT_TARGET_TYPE    = 2)
      PARAMETER (MKL_MIC_DEFAULT_TARGET_NUMBER  = 0)

      PARAMETER (MKL_MIC_AUTO_WORKDIVISION = -1.0)
      PARAMETER (MKL_MPI_PPN = -1.0)

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_ENABLE()
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_DISABLE()
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_GET_DEVICE_COUNT()
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_GET_CPUINFO(TT, TN, NCOR, NTHR, FREQ)
      INTEGER*4         TT, TN, NCOR, NTHR ! TARGET_TYPE, TARGET_NUMBER, NCORES, NTHREADS
      DOUBLE PRECISION  FREQ
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_GET_MEMINFO(TT, TN, TMEM, FMEM)
      INTEGER*4         TT, TN, TMEM, FMEM ! TARGET_TYPE, TARGET_NUMBER, TOTALMEM, FREEMEM
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_GET_WORKDIVISION(TT, TN, WD)
      INTEGER*4         TT, TN ! TARGET_TYPE, TARGET_NUMBER
      DOUBLE PRECISION  WD
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_SET_WORKDIVISION(TT, TN, WD)
      INTEGER*4         TT, TN ! TARGET_TYPE, TARGET_NUMBER
      DOUBLE PRECISION  WD
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_SET_MAX_MEMORY(TT, TN, MEM)
      INTEGER*4         TT, TN ! TARGET_TYPE, TARGET_NUMBER
      INTEGER*8         MEM
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_FREE_MEMORY(TT, TN)
      INTEGER*4         TT, TN ! TARGET_TYPE, TARGET_NUMBER
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_SET_OFFLOAD_REPORT(ENABLED)
      INTEGER*4         ENABLED
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_SET_DEVICE_NUM_THREADS(TT, TN, NT)
      INTEGER*4 TT, TN, NT ! TARGET_TYPE, TARGET_NUMBER, NUM_THREADS
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_GET_RESOURCE_LIMIT(FRACTION)
      DOUBLE PRECISION  FRACTION
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_SET_RESOURCE_LIMIT(FRACTION)
      DOUBLE PRECISION  FRACTION
      END FUNCTION
      END INTERFACE

      INTEGER*4 MKL_MIC_DEFAULT_FLAGS
      INTEGER*4 MKL_MIC_DISABLE_HOST_FALLBACK

      PARAMETER (MKL_MIC_DEFAULT_FLAGS = 0)
      PARAMETER (MKL_MIC_DISABLE_HOST_FALLBACK = 1)

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_SET_FLAGS(FLAG)
      INTEGER*4 FLAG
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_GET_FLAGS()
      END FUNCTION
      END INTERFACE

      INTEGER*4 MKL_MIC_SUCCESS
      INTEGER*4 MKL_MIC_NOT_IMPL
      INTEGER*4 MKL_MIC_HOST_FALLBACK
      INTEGER*4 MKL_MIC_DISABLED
      INTEGER*4 MKL_MIC_FAILED
      INTEGER*4 MKL_MIC_HOST_FALLBACK_DISABLED

      PARAMETER (MKL_MIC_SUCCESS           = 0)
      PARAMETER (MKL_MIC_NOT_IMPL          = 1)
      PARAMETER (MKL_MIC_HOST_FALLBACK     = 2)
      PARAMETER (MKL_MIC_DISABLED          = 3)
      PARAMETER (MKL_MIC_FAILED            = -1)
      PARAMETER (MKL_MIC_HOST_FALLBACK_DISABLED = -2)

      INTERFACE
      INTEGER*4 FUNCTION MKL_MIC_GET_STATUS()
      END FUNCTION
      END INTERFACE

      INTERFACE
      SUBROUTINE MKL_MIC_CLEAR_STATUS()
      END SUBROUTINE
      END INTERFACE

      INTEGER*4 MKL_MIC_REGISTRATION_DISABLE
      INTEGER*4 MKL_MIC_REGISTRATION_ENABLE

      PARAMETER (MKL_MIC_REGISTRATION_DISABLE = 0)
      PARAMETER (MKL_MIC_REGISTRATION_ENABLE  = 1)

      INTERFACE
      SUBROUTINE MKL_MIC_REGISTER_MEMORY(ENABLE)
      INTEGER*4  ENABLE
      END SUBROUTINE
      END INTERFACE

      INTEGER*4 MKL_BLACS_CUSTOM
      INTEGER*4 MKL_BLACS_MSMPI
      INTEGER*4 MKL_BLACS_INTELMPI
      INTEGER*4 MKL_BLACS_MPICH2

      PARAMETER (MKL_BLACS_CUSTOM = 0)
      PARAMETER (MKL_BLACS_MSMPI = 1)
      PARAMETER (MKL_BLACS_INTELMPI = 2)
      PARAMETER (MKL_BLACS_MPICH2 = 3)

      INTERFACE
      INTEGER*4 FUNCTION MKL_SET_MPI(VERBOSE, CUSTOM_LIBRARY_NAME)
      INTEGER*4 VERBOSE
      CHARACTER*(*) CUSTOM_LIBRARY_NAME
      END FUNCTION
      END INTERFACE

! Intel(R) MKL verbose function

      INTERFACE
      INTEGER*4 FUNCTION MKL_VERBOSE(ENABLE)
      INTEGER*4 ENABLE
      END FUNCTION
      END INTERFACE

      INTERFACE
      INTEGER*4 FUNCTION MKL_SET_ENV_MODE(MODE)
      INTEGER*4 MODE
      END FUNCTION
      END INTERFACE

! Obsolete names

      INTEGER*4 MKL_CBWR_SSE3
      PARAMETER (MKL_CBWR_SSE3        = 5)

!*******************************************************************************

!===============================================================================
! Copyright 2014-2017 Intel Corporation All Rights Reserved.
!
! The source code,  information  and material  ("Material") contained  herein is
! owned by Intel Corporation or its  suppliers or licensors,  and  title to such
! Material remains with Intel  Corporation or its  suppliers or  licensors.  The
! Material  contains  proprietary  information  of  Intel or  its suppliers  and
! licensors.  The Material is protected by  worldwide copyright  laws and treaty
! provisions.  No part  of  the  Material   may  be  used,  copied,  reproduced,
! modified, published,  uploaded, posted, transmitted,  distributed or disclosed
! in any way without Intel's prior express written permission.  No license under
! any patent,  copyright or other  intellectual property rights  in the Material
! is granted to  or  conferred  upon  you,  either   expressly,  by implication,
! inducement,  estoppel  or  otherwise.  Any  license   under such  intellectual
! property rights must be express and approved by Intel in writing.
!
! Unless otherwise agreed by Intel in writing,  you may not remove or alter this
! notice or  any  other  notice   embedded  in  Materials  by  Intel  or Intel's
! suppliers or licensors in any way.
!===============================================================================

!  Content:
!      Intel(R) Math Kernel Library (Intel(R) MKL) FORTRAN macros for MKL_DIRECT_CALL
!*******************************************************************************
#ifdef MKL_DIRECT_CALL_SEQ
#ifndef MKL_DIRECT_CALL
#define MKL_DIRECT_CALL
#endif
#endif

#ifdef MKL_DIRECT_CALL

#ifdef MKL_DIRECT_CALL_SEQ
#define MKL_DIRECT_CALL_FLAG 1
#else
#define MKL_DIRECT_CALL_FLAG 0
#endif

#define dgemm DGEMM
#define sgemm SGEMM
#define zgemm ZGEMM
#define cgemm CGEMM

#define DGEMM(ta, tb, m, n, k, alpha, A, LDA, B, LDB, beta, C, LDC) DGEMM_DIRECT(ta,tb,m,n,k,alpha,A,LDA,B,LDB,beta,C,LDC,INT(MKL_DIRECT_CALL_FLAG))
#define SGEMM(ta, tb, m, n, k, alpha, A, LDA, B, LDB, beta, C, LDC) SGEMM_DIRECT(ta,tb,m,n,k,alpha,A,LDA,B,LDB,beta,C,LDC,INT(MKL_DIRECT_CALL_FLAG))
#define CGEMM(ta, tb, m, n, k, alpha, A, LDA, B, LDB, beta, C, LDC) CGEMM_DIRECT(ta,tb,m,n,k,alpha,A,LDA,B,LDB,beta,C,LDC,INT(MKL_DIRECT_CALL_FLAG))
#define ZGEMM(ta, tb, m, n, k, alpha, A, LDA, B, LDB, beta, C, LDC) ZGEMM_DIRECT(ta,tb,m,n,k,alpha,A,LDA,B,LDB,beta,C,LDC,INT(MKL_DIRECT_CALL_FLAG))

#define zgemm3m ZGEMM3M
#define cgemm3m CGEMM3M

#define CGEMM3M(ta, tb, m, n, k, alpha, A, LDA, B, LDB, beta, C, LDC) CGEMM3M_DIRECT(ta,tb,m,n,k,alpha,A,LDA,B,LDB,beta,C,LDC,INT(MKL_DIRECT_CALL_FLAG))
#define ZGEMM3M(ta, tb, m, n, k, alpha, A, LDA, B, LDB, beta, C, LDC) ZGEMM3M_DIRECT(ta,tb,m,n,k,alpha,A,LDA,B,LDB,beta,C,LDC,INT(MKL_DIRECT_CALL_FLAG))

#define dtrsm DTRSM
#define strsm STRSM
#define ztrsm ZTRSM
#define ctrsm CTRSM

#define DTRSM(sa, su, st, sd, m, n, alpha, a, lda, b, ldb) DTRSM_DIRECT(sa,su,st,sd,m,n,alpha,a,lda,b,ldb,INT(MKL_DIRECT_CALL_FLAG))
#define STRSM(sa, su, st, sd, m, n, alpha, a, lda, b, ldb) STRSM_DIRECT(sa,su,st,sd,m,n,alpha,a,lda,b,ldb,INT(MKL_DIRECT_CALL_FLAG))
#define CTRSM(sa, su, st, sd, m, n, alpha, a, lda, b, ldb) CTRSM_DIRECT(sa,su,st,sd,m,n,alpha,a,lda,b,ldb,INT(MKL_DIRECT_CALL_FLAG))
#define ZTRSM(sa, su, st, sd, m, n, alpha, a, lda, b, ldb) ZTRSM_DIRECT(sa,su,st,sd,m,n,alpha,a,lda,b,ldb,INT(MKL_DIRECT_CALL_FLAG))

#define dsyrk DSYRK
#define ssyrk SSYRK
#define zsyrk ZSYRK
#define csyrk CSYRK

#define DSYRK(ul, tr, n, k, alpha, A, LDA, beta, C, LDC) DSYRK_DIRECT(ul,tr,n,k,alpha,A,LDA,beta,C,LDC,INT(MKL_DIRECT_CALL_FLAG))
#define SSYRK(ul, tr, n, k, alpha, A, LDA, beta, C, LDC) SSYRK_DIRECT(ul,tr,n,k,alpha,A,LDA,beta,C,LDC,INT(MKL_DIRECT_CALL_FLAG))
#define CSYRK(ul, tr, n, k, alpha, A, LDA, beta, C, LDC) CSYRK_DIRECT(ul,tr,n,k,alpha,A,LDA,beta,C,LDC,INT(MKL_DIRECT_CALL_FLAG))
#define ZSYRK(ul, tr, n, k, alpha, A, LDA, beta, C, LDC) ZSYRK_DIRECT(ul,tr,n,k,alpha,A,LDA,beta,C,LDC,INT(MKL_DIRECT_CALL_FLAG))

#define daxpy DAXPY
#define saxpy SAXPY
#define caxpy CAXPY
#define zaxpy ZAXPY

#define DAXPY(n, alpha, x, incx, y, incy) DAXPY_DIRECT(n,alpha,x,incx,y,incy,INT(MKL_DIRECT_CALL_FLAG))
#define SAXPY(n, alpha, x, incx, y, incy) SAXPY_DIRECT(n,alpha,x,incx,y,incy,INT(MKL_DIRECT_CALL_FLAG))
#define CAXPY(n, alpha, x, incx, y, incy) CAXPY_DIRECT(n,alpha,x,incx,y,incy,INT(MKL_DIRECT_CALL_FLAG))
#define ZAXPY(n, alpha, x, incx, y, incy) ZAXPY_DIRECT(n,alpha,x,incx,y,incy,INT(MKL_DIRECT_CALL_FLAG))

#define ddot DDOT_DIRECT
#define sdot SDOT_DIRECT
#define DDOT DDOT_DIRECT
#define SDOT SDOT_DIRECT

#endif
